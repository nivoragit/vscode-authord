{
  "name": "vscode-authord",
  "displayName": "vscode-authord",
  "description": "**`vscode-authord`** is a versatile Visual Studio Code extension designed to streamline writing and documentation workflows. It provides a flexible configuration system for managing structured content and enhances productivity with intuitive tools tailored for technical writers, developers, and content creators.",
  "version": "0.0.1",
  "engines": {
    "vscode": "^1.70.0"
  },
  "categories": [
    "Other"
  ],
  "activationEvents": [
    "onLanguage:json",
    "onLanguage:markdown",
    "onStartupFinished",
    "workspaceContains:authord.json",
    "onCommand:authordExtension.checkConfig"
  ],
  "main": "./dist/extension.js",
  "contributes": {
    "viewsWelcome": [
      {
        "view": "emptyProjectView",
        "contents": "Welcome to Authord\nIn order to use authord features, you can open a folder containing a project.\n[Open Folder](command:vscode.openFolder)\nOr create a new project:\n[Create a New Project](command:extension.createProject)\n\nTo report an issue, [Report Issue](https://github.com/nivoragit/vscode-authord/issues).",
        "when": "!authord.configExists"
      }
    ],
    "jsonValidation": [
      {
        "fileMatch": "authord.config.json",
        "url": "./schemas/authord-config-schema.json"
      }
    ],
    "markdown.markdownItPlugins": true,
    "viewsContainers": {
      "activitybar": [
        {
          "id": "authordExtensionContainer",
          "title": "Authord",
          "icon": "./src/media/icon.svg",
          "when": "authord.configExists"
        }
      ]
    },
    "configuration": {
      "type": "object",
      "title": "Authord Extension Settings",
      "properties": {
        "authord.topics": {
          "type": "array",
          "default": [],
          "description": "List of topics to display in the Tree View."
        },
        "authord.autoFocusEditor": {
          "type": "boolean",
          "default": true,
          "description": "Automatically focus the editor when the preview becomes active."
        },
        "authord.focusDelay": {
          "type": "number",
          "default": 500,
          "description": "Delay in milliseconds before shifting focus back to the editor."
        }
      }
    },
    "commands": [
      {
        "command": "extension.createProject",
        "title": "Create a New Project",
        "when": "!authord.configExists"
      },
      {
        "command": "extension.moveTopic",
        "title": "Move Topic"
      },
      {
        "command": "extension.addDocumentation",
        "title": "New",
        "icon": "$(add)"
      },
      {
        "command": "extension.reloadConfiguration",
        "title": "Reload Configuration",
        "icon": "$(sync)"
      },
      {
        "command": "extension.addContextMenuDocumentation",
        "title": "New Instance"
      },
      {
        "command": "extension.rootTopic",
        "title": "Root",
        "icon": "$(add)"
      },
      {
        "command": "workbench.actions.treeView.topicsView.collapseAll",
        "title": "Collapse All",
        "icon": "$(fold-up)"
      },
      {
        "command": "extension.addChildTopic",
        "title": "Child",
        "icon": "$(add)"
      },
      {
        "command": "extension.addContextMenuTopic",
        "title": "New Topic"
      },
      {
        "command": "extension.addContextMenuChildTopic",
        "title": "New Child Topic"        
      },
      {
        "command": "extension.ContextMenuSetasStartPage",
        "title": "Set as Home Page"
      },
      {
        "command": "extension.deleteTopic",
        "title": "Delete",
        "icon": "$(trash)"
      },
      {
        "command": "extension.deleteContextMenuTopic",
        "title": "Remove TOC Element..."
      },
      {
        "command": "extension.deleteContextMenuDocumentation",
        "title": "Delete..."
      },
      {
        "command": "extension.deleteDocumentation",
        "title": "Delete",
        "icon": "$(trash)"
      },
      {
        "command": "extension.renameContextMenuDoc",
        "title": "Rename..."
      },
      {
        "command": "extension.renameDoc",
        "title": "Rename",
        "icon": "$(edit)"
      },
      {
        "command": "authordDocsExtension.selectInstance",
        "title": "Select Documentation Instance",
        "when": "authord.configExists"
      },
      {
        "command": "authordDocsExtension.initialize",
        "title": "Initialize Authord Extension",
        "category": "Authord",
        "when": "authord.configExists"
      },
      {
        "command": "authordExtension.openMarkdownFile",
        "title": "Open Markdown File",
        "when": "authord.configExists"
      },
      {
        "command": "markdownPreview.open",
        "title": "Open Markdown Preview",
        "when": "authord.configExists"
      },
      {
        "command": "markdownPreview.show",
        "title": "Show Markdown Preview",
        "when": "authord.configExists"
      }
    ],
    "views": {
      "authordExtensionContainer": [
        {
          "id": "emptyProjectView",
          "name": "empty project",
          "when": "!authord.configExists"
        },
        {
          "id": "documentationsView",
          "name": "instances",
          "when": "authord.configExists"
        },
        {
          "id": "topicsView",
          "name": "table of contents",
          "when": "authord.configExists",
          "dragAndDrop": true
        }
      ]
    },
    "menus": {
      "view/item/context": [
        {
          "command": "extension.addContextMenuTopic",
          "when": "view == topicsView && viewItem == topic",
          "group": "navigation@1"
        },
        {
          "command": "extension.addContextMenuChildTopic",
          "when": "view == topicsView && viewItem == topic",
          "group": "navigation@2"
        },
        {
          "command": "extension.ContextMenuSetasStartPage",
          "when": "view == topicsView && viewItem == topic",
          "group": "navigation@2"
        },
        {
          "command": "extension.addChildTopic",
          "when": "view == topicsView && viewItem == topic",
          "group": "inline"
        },
        {
          "command": "extension.deleteTopic",
          "when": "view == topicsView && viewItem == topic",
          "group": "inline"
        },
        {
          "command": "extension.renameDoc",
          "when": "view == documentationsView && viewItem == documentation",
          "group": "inline"
        },
        {
          "command": "extension.deleteDocumentation",
          "when": "view == documentationsView && viewItem == documentation",
          "group": "inline"
        },
        {
          "command": "extension.deleteContextMenuTopic",
          "when": "view == topicsView && viewItem == topic",
          "group": "navigation@2"
        },
        {
          "command": "extension.renameContextMenuDoc",
          "when": "view == documentationsView && viewItem == documentation",
          "group": "navigation"
        },
        {
          "command": "extension.deleteContextMenuDocumentation",
          "when": "view == documentationsView && viewItem == documentation",
          "group": "navigation"
        },
        {
          "command": "extension.addContextMenuDocumentation",
          "when": "view == documentationsView",
          "group": "navigation"
        }
      ],
      "view/title": [
        {
          "command": "extension.rootTopic",
          "when": "view == topicsView",
          "group": "navigation"
        },
        {
          "command": "extension.addDocumentation",
          "when": "view == documentationsView",
          "group": "navigation"
        },
        {
          "command": "extension.reloadConfiguration",
          "when": "view == documentationsView",
          "group": "navigation"
        },
        {
          "command": "workbench.actions.treeView.topicsView.collapseAll",
          "when": "view == topicsView",
          "group": "navigation"
        }
      ]
    }
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/nivoragit/authord-authord.git"
  },
  "files": [
    "out/",
    "schemas/",
    "package.json",
    "README.md",
    "LICENSE"
  ],
  "scripts": {
    "vscode:prepublish": "npm run package",
    "compile": "webpack",
    "watch": "webpack --watch",
    "package": "webpack --mode production --devtool hidden-source-map",
    "compile-tests": "tsc -p . --outDir out",
    "watch-tests": "tsc -p . -w --outDir out",
    "pretest": "npm run compile-tests && npm run compile && npm run lint",
    "lint": "eslint src",
    "test": "vscode-test"
  },
  "devDependencies": {
    "@eslint/js": "^9.17.0",
    "@types/markdown-it": "^14.1.2",
    "@types/node": "^20.17.9",
    "@types/vscode": "^1.70.0",
    "@types/xml2js": "^0.4.14",
    "@typescript-eslint/eslint-plugin": "^8.10.0",
    "@typescript-eslint/parser": "^8.7.0",
    "@vscode/test-cli": "^0.0.10",
    "esbuild-loader": "^4.2.2",
    "eslint": "^8.57.1",
    "eslint-config-airbnb-base": "^15.0.0",
    "eslint-config-prettier": "^9.1.0",
    "eslint-plugin-import": "^2.31.0",
    "eslint-plugin-prettier": "^5.2.1",
    "globals": "^15.14.0",
    "prettier": "^3.4.2",
    "typescript": "^5.7.2",
    "typescript-eslint": "^8.18.2",
    "webpack": "^5.96.1",
    "webpack-cli": "^5.1.4"
  },
  "dependencies": {
    "ajv": "^8.17.1",
    "ajv-formats": "^3.0.1",
    "fast-xml-parser": "^4.5.1",
    "markdown-it-attrs": "^4.3.1",
    "markdown-it-plantuml": "^1.4.1",
    "uuid": "^11.0.3",
    "xml2js": "^0.6.2"
  }
}
